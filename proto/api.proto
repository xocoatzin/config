
/*
 * https://cloud.google.com/apis/design
 */
syntax = "proto3";

package magicleap.datasets.users;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";


// The Users API.
service Users {

  /*
   * Tokens
   */

   // Create a token
  rpc CreateToken(CreateTokenRequest) returns (Token) {
    option (google.api.http) = {
      post: "/api/v1/tokens",
    };
  }

  /*
   * Roles
   */

  // List available roles
  rpc ListRoles(ListRolesRequest) returns (ListRolesResponse) {
    option (google.api.http) = {
      get: "/api/v1/roles"
    };
  }

  /*
   * Users
   */

  //  // List available users
  // rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
  //   option (google.api.http) = {
  //     get: "/api/v1/users"
  //   };
  // }

  // // // Create a new user
  // // rpc CreateUser(CreateUserRequest) returns (User) {
  // //   option (google.api.http) = {
  // //     post: "/api/v1/users"
  // //     body: "user"
  // //   };
  // // }

  // Get a user by name
  rpc GetUser(GetUserRequest) returns (User) {
    option (google.api.http) = {
      get: "/api/v1/{name=users/*}"
    };
  }

  // // Update an existing user
  // rpc UpdateUser(UpdateUserRequest) returns (User) {
  //   option (google.api.http) = {
  //     patch: "/api/v1/{user.name=users/*}"
  //     body: "user"
  //   };
  // }

  rpc DisableUser(DisableUserRequest) returns (User) {
    option (google.api.http) = {
      post: "/api/v1/{name=users/*}:disable"
      body: "*"
    };
  }

  rpc EnableUser(EnableUserRequest) returns (User) {
    option (google.api.http) = {
      post: "/api/v1/{name=users/*}:enable"
      body: "*"
    };
  }

  // // // Delete a user
  // // rpc DeleteUser(DeleteUserRequest) returns (google.protobuf.Empty) {
  // //   option (google.api.http) = {
  // //     delete: "/api/v1/{name=users/*}"
  // //   };
  // // }

  /*
   * User Roles
   */

  // List available roles
  rpc ListUserRoles(ListUserRolesRequest) returns (ListUserRolesResponse) {
    option (google.api.http) = {
      get: "/api/v1/{parent=users/*}/roles"
    };
  }

  // Add a new role
  rpc AddUserRole(AddUserRoleRequest) returns (Role) {
    option (google.api.http) = {
      post: "/api/v1/{parent=users/*}/roles"
      body: "role"
    };
  }

  // // // Get a role by name
  // // rpc GetRole(GetRoleRequest) returns (Role) {
  // //   option (google.api.http) = {
  // //     get: "/api/v1/{name=users/*/roles/*}"
  // //   };
  // // }

  // Remove a role
  rpc RemoveUserRole(RemoveUserRoleRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/{name=users/*/roles/*}"
    };
  }

  /*
   * User Groups
   */

  // List available groups
  rpc ListUserGroups(ListUserGroupsRequest) returns (ListUserGroupsResponse) {
    option (google.api.http) = {
      get: "/api/v1/{parent=users/*}/groups"
    };
  }

  // /*
  //  * User Notification s
  //  */

  // // List available notifications
  // rpc ListNotifications(ListNotificationsRequest) returns (ListNotificationsResponse) {
  //   option (google.api.http) = {
  //     get: "/api/v1/{parent=users/*}/notifications"
  //   };
  // }

  // // Create a new notification
  // rpc CreateNotification(CreateNotificationRequest) returns (Notification) {
  //   option (google.api.http) = {
  //     post: "/api/v1/{parent=users/*}/notifications"
  //     body: "notification"
  //   };
  // }

  // // Get a notification by name
  // rpc GetNotification(GetNotificationRequest) returns (Notification) {
  //   option (google.api.http) = {
  //     get: "/api/v1/{name=users/*/notifications/*}"
  //   };
  // }

  // // // Update an existing notification
  // // rpc UpdateNotification(UpdateNotificationRequest) returns (Notification) {
  // //   option (google.api.http) = {
  // //     patch: "/api/v1/{notification.name=users/*/notifications/*}"
  // //     body: "notification"
  // //   };
  // // }

  // // Update an existing notification
  // rpc AcknowledgeNotification(AcknowledgeNotificationRequest) returns (Notification) {
  //   option (google.api.http) = {
  //     post: "/api/v1/{notification.name=users/*/notifications/*}:acknowledge"
  //     body: "*"
  //   };
  // }

  // // Delete a notification
  // rpc DeleteNotification(DeleteNotificationRequest) returns (google.protobuf.Empty) {
  //   option (google.api.http) = {
  //     delete: "/api/v1/{name=users/*/notifications/*}"
  //   };
  // }

  /*
   * Groups
   */

   // List available groups
  rpc ListGroups(ListGroupsRequest) returns (ListGroupsResponse) {
    option (google.api.http) = {
      get: "/api/v1/groups"
    };
  }

  // Create a new group
  rpc CreateGroup(CreateGroupRequest) returns (Group) {
    option (google.api.http) = {
      post: "/api/v1/groups"
      body: "group"
    };
  }

  // Get a group by name
  rpc GetGroup(GetGroupRequest) returns (Group) {
    option (google.api.http) = {
      get: "/api/v1/{name=groups/*}"
    };
  }

  // // Update an existing group
  // rpc UpdateGroup(UpdateGroupRequest) returns (Group) {
  //   option (google.api.http) = {
  //     patch: "/api/v1/{group.name=groups/*}"
  //     body: "group"
  //   };
  // }

  // // // Delete a group
  // // rpc DeleteGroup(DeleteGroupRequest) returns (google.protobuf.Empty) {
  // //   option (google.api.http) = {
  // //     delete: "/api/v1/{name=groups/*}"
  // //   };
  // // }

  // // Send an email to the user group
  // rpc EmailGroup(EmailGroupRequest) returns (TBD) {
  //   option (google.api.http) = {
  //     post: "/api/v1/{name=groups/*}:sendEmail"
  //     body: "*"
  //   };
  // }



  /*
   * Members member
   */

  // List available memberships
  rpc ListMemberships(ListMembershipsRequest) returns (ListMembershipsResponse) {
    option (google.api.http) = {
      get: "/api/v1/{parent=grpups/*}/memberships"
    };
  }

  // Create a new member
  rpc AddMembership(AddMembershipRequest) returns (Membership) {
    option (google.api.http) = {
      post: "/api/v1/{parent=grpups/*}/memberships"
      body: "membership"
    };
  }

  // // // Get a member by name
  // // rpc GetMember(GetMemberRequest) returns (Member) {
  // //   option (google.api.http) = {
  // //     get: "/api/v1/{name=grpups/*/memberships/*}"
  // //   };
  // // }

  // Remove a member
  rpc RemoveMembership(RemoveMembershipRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/{name=grpups/*/memberships/*}"
    };
  }
}

// A message describing a project
message Token {
  // The type of token
  enum TokenType {
    // The token type has not been provided.
    TOKEN_TYPE_UNSPECIFIED = 0;
    // A google-issued access token
    ACCESS_TOKEN = 1;
    // A google-issued ID token
    ID_TOKEN = 2;
    // A JWT token issued by datasets.
    DATASETS_TOKEN = 3;
  }

  // The token contents
  string token = 1;
  // Token Type
  TokenType type = 2;
  // The expiration time of the token
  google.protobuf.Timestamp expiration_time = 3;
}

message CreateTokenRequest {
}

// A message describing a role
message Role {
  // The name of the role
  string name = 1;
  string key = 2;
  // The description of the role
  string description = 3;
}

// List availableRoles
message ListRolesRequest {
  // The parent resource name.
  // string parent = 1;

  // // The maximum number of items to return.
  // int32 page_size = 2;

  // // The next_page_token value returned from a previous List request, if any.
  // string page_token = 3;
}

// Response
message ListRolesResponse {
  // The found records
  repeated Role roles = 1;

  // Token to retrieve the next page of results, or empty if there are no
  // more results in the list.
  string next_page_token = 2;
}


// // A message describing a group
// message Group {
//   // The name of the group
//   string name = 1;
//   // The description of the group
//   // string description = 2;
// }


message User {
  string name = 1;
  string email = 2;
  string full_name = 3;
  string given_name = 4;
  string family_name = 5;
  string picture = 6;
  string locale = 7;
  bool disabled = 8;
  google.protobuf.Timestamp creation_time = 9;
  google.protobuf.Timestamp last_seen_time = 10;
}

message GetUserRequest {
  // The name of the user entity
  string name = 1;
}

message AddUserRoleRequest {
  string parent = 1;
  Role role = 2;
}

message RemoveUserRoleRequest {
  string name = 1;
}

message ListUserRolesRequest {
  // The name of the parent entity.
  string parent = 1;

  // The maximum number of items to return.
  int32 page_size = 2;

  // The next_page_token value returned from a previous List request, if any.
  string page_token = 3;
}

message ListUserRolesResponse {
  // The found roles
  repeated Role roles = 1;

  // Token to retrieve the next page of results, or empty if there are no
  // more results in the list.
  string next_page_token = 2;
}

message ListUserGroupsRequest {
  // The name of the parent entity.
  string parent = 1;

  // The maximum number of items to return.
  int32 page_size = 2;

  // The next_page_token value returned from a previous List request, if any.
  string page_token = 3;
}

message ListUserGroupsResponse {
  // The found entities
  repeated Group groups = 1;

  // Token to retrieve the next page of results, or empty if there are no
  // more results in the list.
  string next_page_token = 2;
}

message DisableUserRequest {
  string name = 1;
}

message EnableUserRequest {
  string name = 1;
}

message Group {
  string name = 1;
  string title = 2;
  string description = 3;
  google.protobuf.Timestamp creation_time = 4;
  string created_by = 5;
}

message CreateGroupRequest {
  // The resource to create.
  Group group = 1;

  // The group id to use.
  string group_id = 3;
}

message ListGroupsRequest {
  // The maximum number of items to return.
  int32 page_size = 1;

  // The next_page_token value returned from a previous List request, if any.
  string page_token = 2;
}

message ListGroupsResponse {
  // The found entities
  repeated Group groups = 1;

  // Token to retrieve the next page of results, or empty if there are no
  // more results in the list.
  string next_page_token = 2;
}

message GetGroupRequest {
  // The name of the entity
  string name = 1;
}

message Membership {
  string name = 1;
  string user = 2;
  string created_by = 3;
  google.protobuf.Timestamp creation_time = 4;
}

message AddMembershipRequest {
  // The resource to create.
  string parent = 1;
  Membership membership = 2;
}

message RemoveMembershipRequest {
  string name = 1;
}

message ListMembershipsRequest {
  // The name of the parent entity.
  string parent = 1;

  // The maximum number of items to return.
  int32 page_size = 2;

  // The next_page_token value returned from a previous List request, if any.
  string page_token = 3;
}

message ListMembershipsResponse {
  // The entities found
  repeated Membership memberships = 1;

  // Token to retrieve the next page of results, or empty if there are no
  // more results in the list.
  string next_page_token = 2;
}

