# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from UsersAPI import api_pb2 as api__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class UsersStub(object):
  """The Users API.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.CreateToken = channel.unary_unary(
        '/magicleap.datasets.users.Users/CreateToken',
        request_serializer=api__pb2.CreateTokenRequest.SerializeToString,
        response_deserializer=api__pb2.Token.FromString,
        )
    self.ListRoles = channel.unary_unary(
        '/magicleap.datasets.users.Users/ListRoles',
        request_serializer=api__pb2.ListRolesRequest.SerializeToString,
        response_deserializer=api__pb2.ListRolesResponse.FromString,
        )
    self.GetUser = channel.unary_unary(
        '/magicleap.datasets.users.Users/GetUser',
        request_serializer=api__pb2.GetUserRequest.SerializeToString,
        response_deserializer=api__pb2.User.FromString,
        )
    self.DisableUser = channel.unary_unary(
        '/magicleap.datasets.users.Users/DisableUser',
        request_serializer=api__pb2.DisableUserRequest.SerializeToString,
        response_deserializer=api__pb2.User.FromString,
        )
    self.EnableUser = channel.unary_unary(
        '/magicleap.datasets.users.Users/EnableUser',
        request_serializer=api__pb2.EnableUserRequest.SerializeToString,
        response_deserializer=api__pb2.User.FromString,
        )
    self.ListUserRoles = channel.unary_unary(
        '/magicleap.datasets.users.Users/ListUserRoles',
        request_serializer=api__pb2.ListUserRolesRequest.SerializeToString,
        response_deserializer=api__pb2.ListUserRolesResponse.FromString,
        )
    self.AddUserRole = channel.unary_unary(
        '/magicleap.datasets.users.Users/AddUserRole',
        request_serializer=api__pb2.AddUserRoleRequest.SerializeToString,
        response_deserializer=api__pb2.Role.FromString,
        )
    self.RemoveUserRole = channel.unary_unary(
        '/magicleap.datasets.users.Users/RemoveUserRole',
        request_serializer=api__pb2.RemoveUserRoleRequest.SerializeToString,
        response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )
    self.ListUserGroups = channel.unary_unary(
        '/magicleap.datasets.users.Users/ListUserGroups',
        request_serializer=api__pb2.ListUserGroupsRequest.SerializeToString,
        response_deserializer=api__pb2.ListUserGroupsResponse.FromString,
        )
    self.ListGroups = channel.unary_unary(
        '/magicleap.datasets.users.Users/ListGroups',
        request_serializer=api__pb2.ListGroupsRequest.SerializeToString,
        response_deserializer=api__pb2.ListGroupsResponse.FromString,
        )
    self.CreateGroup = channel.unary_unary(
        '/magicleap.datasets.users.Users/CreateGroup',
        request_serializer=api__pb2.CreateGroupRequest.SerializeToString,
        response_deserializer=api__pb2.Group.FromString,
        )
    self.GetGroup = channel.unary_unary(
        '/magicleap.datasets.users.Users/GetGroup',
        request_serializer=api__pb2.GetGroupRequest.SerializeToString,
        response_deserializer=api__pb2.Group.FromString,
        )
    self.ListMemberships = channel.unary_unary(
        '/magicleap.datasets.users.Users/ListMemberships',
        request_serializer=api__pb2.ListMembershipsRequest.SerializeToString,
        response_deserializer=api__pb2.ListMembershipsResponse.FromString,
        )
    self.AddMembership = channel.unary_unary(
        '/magicleap.datasets.users.Users/AddMembership',
        request_serializer=api__pb2.AddMembershipRequest.SerializeToString,
        response_deserializer=api__pb2.Membership.FromString,
        )
    self.RemoveMembership = channel.unary_unary(
        '/magicleap.datasets.users.Users/RemoveMembership',
        request_serializer=api__pb2.RemoveMembershipRequest.SerializeToString,
        response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )


class UsersServicer(object):
  """The Users API.
  """

  def CreateToken(self, request, context):
    """
    Tokens

    Create a token
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListRoles(self, request, context):
    """
    Roles

    List available roles
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetUser(self, request, context):
    """
    Users

    // List available users
    rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = {
    get: "/api/v1/users"
    };
    }

    // // Create a new user
    // rpc CreateUser(CreateUserRequest) returns (User) {
    //   option (google.api.http) = {
    //     post: "/api/v1/users"
    //     body: "user"
    //   };
    // }

    Get a user by name
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DisableUser(self, request, context):
    """// Update an existing user
    rpc UpdateUser(UpdateUserRequest) returns (User) {
    option (google.api.http) = {
    patch: "/api/v1/{user.name=users/*}"
    body: "user"
    };
    }

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def EnableUser(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListUserRoles(self, request, context):
    """// // Delete a user
    // rpc DeleteUser(DeleteUserRequest) returns (google.protobuf.Empty) {
    //   option (google.api.http) = {
    //     delete: "/api/v1/{name=users/*}"
    //   };
    // }


    User Roles

    List available roles
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AddUserRole(self, request, context):
    """Add a new role
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RemoveUserRole(self, request, context):
    """// // Get a role by name
    // rpc GetRole(GetRoleRequest) returns (Role) {
    //   option (google.api.http) = {
    //     get: "/api/v1/{name=users/*/roles/*}"
    //   };
    // }

    Remove a role
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListUserGroups(self, request, context):
    """
    User Groups

    List available groups
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListGroups(self, request, context):
    """/*
    * User Notification s
    */

    // List available notifications
    rpc ListNotifications(ListNotificationsRequest) returns (ListNotificationsResponse) {
    option (google.api.http) = {
    get: "/api/v1/{parent=users/*}/notifications"
    };
    }

    // Create a new notification
    rpc CreateNotification(CreateNotificationRequest) returns (Notification) {
    option (google.api.http) = {
    post: "/api/v1/{parent=users/*}/notifications"
    body: "notification"
    };
    }

    // Get a notification by name
    rpc GetNotification(GetNotificationRequest) returns (Notification) {
    option (google.api.http) = {
    get: "/api/v1/{name=users/*/notifications/*}"
    };
    }

    // // Update an existing notification
    // rpc UpdateNotification(UpdateNotificationRequest) returns (Notification) {
    //   option (google.api.http) = {
    //     patch: "/api/v1/{notification.name=users/*/notifications/*}"
    //     body: "notification"
    //   };
    // }

    // Update an existing notification
    rpc AcknowledgeNotification(AcknowledgeNotificationRequest) returns (Notification) {
    option (google.api.http) = {
    post: "/api/v1/{notification.name=users/*/notifications/*}:acknowledge"
    body: "*"
    };
    }

    // Delete a notification
    rpc DeleteNotification(DeleteNotificationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
    delete: "/api/v1/{name=users/*/notifications/*}"
    };
    }


    Groups

    List available groups
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CreateGroup(self, request, context):
    """Create a new group
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetGroup(self, request, context):
    """Get a group by name
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListMemberships(self, request, context):
    """// Update an existing group
    rpc UpdateGroup(UpdateGroupRequest) returns (Group) {
    option (google.api.http) = {
    patch: "/api/v1/{group.name=groups/*}"
    body: "group"
    };
    }

    // // Delete a group
    // rpc DeleteGroup(DeleteGroupRequest) returns (google.protobuf.Empty) {
    //   option (google.api.http) = {
    //     delete: "/api/v1/{name=groups/*}"
    //   };
    // }

    // Send an email to the user group
    rpc EmailGroup(EmailGroupRequest) returns (TBD) {
    option (google.api.http) = {
    post: "/api/v1/{name=groups/*}:sendEmail"
    body: "*"
    };
    }


    Members member

    List available memberships
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AddMembership(self, request, context):
    """Create a new member
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RemoveMembership(self, request, context):
    """// // Get a member by name
    // rpc GetMember(GetMemberRequest) returns (Member) {
    //   option (google.api.http) = {
    //     get: "/api/v1/{name=grpups/*/memberships/*}"
    //   };
    // }

    Remove a member
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_UsersServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'CreateToken': grpc.unary_unary_rpc_method_handler(
          servicer.CreateToken,
          request_deserializer=api__pb2.CreateTokenRequest.FromString,
          response_serializer=api__pb2.Token.SerializeToString,
      ),
      'ListRoles': grpc.unary_unary_rpc_method_handler(
          servicer.ListRoles,
          request_deserializer=api__pb2.ListRolesRequest.FromString,
          response_serializer=api__pb2.ListRolesResponse.SerializeToString,
      ),
      'GetUser': grpc.unary_unary_rpc_method_handler(
          servicer.GetUser,
          request_deserializer=api__pb2.GetUserRequest.FromString,
          response_serializer=api__pb2.User.SerializeToString,
      ),
      'DisableUser': grpc.unary_unary_rpc_method_handler(
          servicer.DisableUser,
          request_deserializer=api__pb2.DisableUserRequest.FromString,
          response_serializer=api__pb2.User.SerializeToString,
      ),
      'EnableUser': grpc.unary_unary_rpc_method_handler(
          servicer.EnableUser,
          request_deserializer=api__pb2.EnableUserRequest.FromString,
          response_serializer=api__pb2.User.SerializeToString,
      ),
      'ListUserRoles': grpc.unary_unary_rpc_method_handler(
          servicer.ListUserRoles,
          request_deserializer=api__pb2.ListUserRolesRequest.FromString,
          response_serializer=api__pb2.ListUserRolesResponse.SerializeToString,
      ),
      'AddUserRole': grpc.unary_unary_rpc_method_handler(
          servicer.AddUserRole,
          request_deserializer=api__pb2.AddUserRoleRequest.FromString,
          response_serializer=api__pb2.Role.SerializeToString,
      ),
      'RemoveUserRole': grpc.unary_unary_rpc_method_handler(
          servicer.RemoveUserRole,
          request_deserializer=api__pb2.RemoveUserRoleRequest.FromString,
          response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
      ),
      'ListUserGroups': grpc.unary_unary_rpc_method_handler(
          servicer.ListUserGroups,
          request_deserializer=api__pb2.ListUserGroupsRequest.FromString,
          response_serializer=api__pb2.ListUserGroupsResponse.SerializeToString,
      ),
      'ListGroups': grpc.unary_unary_rpc_method_handler(
          servicer.ListGroups,
          request_deserializer=api__pb2.ListGroupsRequest.FromString,
          response_serializer=api__pb2.ListGroupsResponse.SerializeToString,
      ),
      'CreateGroup': grpc.unary_unary_rpc_method_handler(
          servicer.CreateGroup,
          request_deserializer=api__pb2.CreateGroupRequest.FromString,
          response_serializer=api__pb2.Group.SerializeToString,
      ),
      'GetGroup': grpc.unary_unary_rpc_method_handler(
          servicer.GetGroup,
          request_deserializer=api__pb2.GetGroupRequest.FromString,
          response_serializer=api__pb2.Group.SerializeToString,
      ),
      'ListMemberships': grpc.unary_unary_rpc_method_handler(
          servicer.ListMemberships,
          request_deserializer=api__pb2.ListMembershipsRequest.FromString,
          response_serializer=api__pb2.ListMembershipsResponse.SerializeToString,
      ),
      'AddMembership': grpc.unary_unary_rpc_method_handler(
          servicer.AddMembership,
          request_deserializer=api__pb2.AddMembershipRequest.FromString,
          response_serializer=api__pb2.Membership.SerializeToString,
      ),
      'RemoveMembership': grpc.unary_unary_rpc_method_handler(
          servicer.RemoveMembership,
          request_deserializer=api__pb2.RemoveMembershipRequest.FromString,
          response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'magicleap.datasets.users.Users', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
